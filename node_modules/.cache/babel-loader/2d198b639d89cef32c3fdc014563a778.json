{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/rocket/Downloads/kellyservices-assignment/src/components/account/account.js\";\n\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from 'react-toastify';\nimport MyTextField from '../common/textfield';\nimport { saveUser, setPasswordVerification, setUsernameVerification } from '../../actions/authentication';\nimport * as Yup from 'yup';\nimport \"./account.scss\";\nimport { useDispatch } from \"react-redux\";\n\nvar Account = function Account() {\n  var dispatch = useDispatch();\n  /**\n   * below dispatched are for reset purpose, so that demo app does not have to refresh\n   * not for development\n   * Clear store\n   */\n\n  dispatch(saveUser({}));\n  dispatch(setPasswordVerification(false));\n  dispatch(setUsernameVerification(false));\n  var history = useHistory();\n\n  var notify = function notify() {\n    toast.info( /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }\n    }, \" \", 'Account Created Successfully', \" \"), {\n      position: toast.POSITION.TOP_CENTER,\n      closeButton: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainTitle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"  Create account \"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      username: '',\n      retypeUsername: '',\n      password: '',\n      retypePassword: ''\n    },\n    validationSchema: AccountSchema,\n    onSubmit: function onSubmit(values) {\n      notify();\n      dispatch(saveUser(values));\n      history.push(\"/\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, function (props) {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"firstnameWrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"firstName\",\n      type: \"text\",\n      label: \"First Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 60\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lastnameWrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"lastName\",\n      type: \"text\",\n      label: \"Last Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 59\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"username\",\n      type: \"text\",\n      label: \"Username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"retypeUsername\",\n      type: \"text\",\n      label: \"Re-type username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"password\",\n      type: \"text\",\n      label: \"Password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"retypePassword\",\n      type: \"text\",\n      label: \"Re-type password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, \"Submit\"));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centerText commonLabels alreayAccount\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Already have an account ?  \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 44\n    }\n  }, \"Signin\"))));\n};\n\nvar AccountSchema = Yup.object().shape({\n  firstName: Yup.string().required('Please enter your first name'),\n  lastName: Yup.string().required('Please enter your last name'),\n  username: Yup.string().required('Please enter valid username'),\n  retypeUsername: Yup.string().oneOf([Yup.ref('username')], 'Username does not match').required('Please retype username'),\n  password: Yup.string().required('please enter valid password'),\n  retypePassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Please retype password')\n});\nexport default Account;","map":{"version":3,"sources":["/home/rocket/Downloads/kellyservices-assignment/src/components/account/account.js"],"names":["React","Form","Formik","Link","useHistory","toast","MyTextField","saveUser","setPasswordVerification","setUsernameVerification","Yup","useDispatch","Account","dispatch","history","notify","info","position","POSITION","TOP_CENTER","closeButton","firstName","lastName","username","retypeUsername","password","retypePassword","AccountSchema","values","push","props","object","shape","string","required","oneOf","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from 'react-toastify';\n\nimport MyTextField from '../common/textfield'\nimport { saveUser, setPasswordVerification, setUsernameVerification } from '../../actions/authentication'\nimport * as Yup from 'yup';\nimport \"./account.scss\";\n\nimport { useDispatch } from \"react-redux\";\n\n\nconst Account = () => {\n\n    const dispatch = useDispatch();\n\n    /**\n     * below dispatched are for reset purpose, so that demo app does not have to refresh\n     * not for development\n     * Clear store\n     */\n    dispatch(saveUser({}))\n    dispatch(setPasswordVerification(false))\n    dispatch(setUsernameVerification(false))\n\n    let history = useHistory();\n\n    const notify = () => {\n        toast.info(<div> {'Account Created Successfully'} </div>, { position: toast.POSITION.TOP_CENTER, closeButton: false })\n    }\n\n    return <div className='account'>\n        <div className=\"container\">\n            <div className=\"mainTitle\">  Create account </div>\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    username: '',\n                    retypeUsername: '',\n                    password: '',\n                    retypePassword: ''\n                }}\n\n                validationSchema={AccountSchema}\n\n                onSubmit={(values) => {\n                    notify()\n                    dispatch(saveUser(values))\n                    history.push(\"/\");\n                }}\n            >\n                {(props) => (\n                    <Form>\n                        <div className=\"firstnameWrapper\"> <MyTextField name=\"firstName\" type=\"text\" label=\"First Name\" /> </div>\n                        <div className='lastnameWrapper'> <MyTextField name=\"lastName\" type=\"text\" label=\"Last Name\" /> </div>\n                        <MyTextField name=\"username\" type=\"text\" label=\"Username\" />\n                        <MyTextField name=\"retypeUsername\" type=\"text\" label=\"Re-type username\" />\n                        <MyTextField name=\"password\" type=\"text\" label=\"Password\" />\n                        <MyTextField name=\"retypePassword\" type=\"text\" label=\"Re-type password\" />\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"centerText commonLabels alreayAccount\">\n                Already have an account ?  <Link to=\"/\">Signin</Link>\n\n            </div>\n        </div>\n    </div>\n};\n\nconst AccountSchema = Yup.object().shape({\n    firstName: Yup.string().required('Please enter your first name'),\n    lastName: Yup.string().required('Please enter your last name'),\n    username: Yup.string().required('Please enter valid username'),\n    retypeUsername: Yup.string().oneOf([Yup.ref('username')], 'Username does not match').required('Please retype username'),\n    password: Yup.string().required('please enter valid password'),\n    retypePassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Please retype password'),\n});\n\nexport default Account"]},"metadata":{},"sourceType":"module"}