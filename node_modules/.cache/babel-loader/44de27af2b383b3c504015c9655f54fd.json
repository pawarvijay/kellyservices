{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/rocket/Downloads/kellyservices-assignment/src/components/account/account.js\";\n\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport MyTextField from '../common/textfield';\nimport { saveUser } from '../../actions/authentication';\nimport * as Yup from 'yup';\nimport \"./account.scss\";\nimport { useDispatch } from \"react-redux\";\n\nvar Account = function Account() {\n  var dispatch = useDispatch();\n  /**\n   * Reset so that demo app does not have to refresh\n   * not for development\n   */\n\n  setPasswordVerification();\n  var history = useHistory();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainTitle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"  Create account \"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      username: '',\n      retypeUsername: '',\n      password: '',\n      retypePassword: ''\n    },\n    validationSchema: AccountSchema,\n    onSubmit: function onSubmit(values, actions) {\n      dispatch(saveUser(values));\n      history.push(\"/\"); // if (!matchPassword(values))\n      //     setTimeout(() => {\n      //         alert(JSON.stringify(values, null, 2));\n      //         actions.setSubmitting(false);\n      //     }, 1000);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, function (props) {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"firstnameWrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"firstName\",\n      type: \"text\",\n      label: \"First Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lastnameWrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"lastName\",\n      type: \"text\",\n      label: \"Last Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"username\",\n      type: \"text\",\n      label: \"Username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"retypeUsername\",\n      type: \"text\",\n      label: \"Re-type username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"password\",\n      type: \"text\",\n      label: \"Password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      name: \"retypePassword\",\n      type: \"text\",\n      label: \"Re-type password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \"Submit\"));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centerText commonLabels alreayAccount\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Already have an account ?  \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 44\n    }\n  }, \"Signin\"))));\n};\n\nvar AccountSchema = Yup.object().shape({\n  firstName: Yup.string().required('Please enter your first name'),\n  lastName: Yup.string().required('Please enter your last name'),\n  username: Yup.string().required('Please enter valid username'),\n  retypeUsername: Yup.string().oneOf([Yup.ref('username')], 'Username does not match').required('Please retype username'),\n  password: Yup.string().required('please enter valid password'),\n  retypePassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Please retype password')\n});\nexport default Account;","map":{"version":3,"sources":["/home/rocket/Downloads/kellyservices-assignment/src/components/account/account.js"],"names":["React","Form","Formik","Link","useHistory","MyTextField","saveUser","Yup","useDispatch","Account","dispatch","setPasswordVerification","history","firstName","lastName","username","retypeUsername","password","retypePassword","AccountSchema","values","actions","push","props","object","shape","string","required","oneOf","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport MyTextField from '../common/textfield'\nimport { saveUser} from '../../actions/authentication'\nimport * as Yup from 'yup';\nimport \"./account.scss\";\n\nimport { useDispatch } from \"react-redux\";\n\nconst Account = () => {\n\n    const dispatch = useDispatch();\n\n    /**\n     * Reset so that demo app does not have to refresh\n     * not for development\n     */\n    setPasswordVerification()\n    \n\n    \n\n\n    let history = useHistory();\n\n    return <div className='account'>\n        <div className=\"container\">\n            <div className=\"mainTitle\">  Create account </div>\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    username: '',\n                    retypeUsername: '',\n                    password: '',\n                    retypePassword: ''\n                }}\n\n                validationSchema={AccountSchema}\n\n                onSubmit={(values, actions) => {\n                    dispatch(saveUser(values))\n                    history.push(\"/\");\n                    \n                    // if (!matchPassword(values))\n                    //     setTimeout(() => {\n                    //         alert(JSON.stringify(values, null, 2));\n                    //         actions.setSubmitting(false);\n                    //     }, 1000);\n                }}\n            >\n                {(props) => (\n                    <Form>\n                        <div className=\"firstnameWrapper\">\n                            <MyTextField name=\"firstName\" type=\"text\" label=\"First Name\" />\n                        </div>\n                        <div className='lastnameWrapper'>\n                            <MyTextField name=\"lastName\" type=\"text\" label=\"Last Name\" />\n                        </div>\n                        <MyTextField name=\"username\" type=\"text\" label=\"Username\" />\n                        <MyTextField name=\"retypeUsername\" type=\"text\" label=\"Re-type username\" />\n                        <MyTextField name=\"password\" type=\"text\" label=\"Password\" />\n                        <MyTextField name=\"retypePassword\" type=\"text\" label=\"Re-type password\" />\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"centerText commonLabels alreayAccount\">\n                Already have an account ?  <Link to=\"/\">Signin</Link>\n\n            </div>\n        </div>\n    </div>\n};\n\nconst AccountSchema = Yup.object().shape({\n    firstName: Yup.string().required('Please enter your first name'),\n    lastName: Yup.string().required('Please enter your last name'),\n    username: Yup.string().required('Please enter valid username'),\n    retypeUsername: Yup.string().oneOf([Yup.ref('username')], 'Username does not match').required('Please retype username'),\n    password: Yup.string().required('please enter valid password'),\n    retypePassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Please retype password'),\n});\n\nexport default Account"]},"metadata":{},"sourceType":"module"}